ignette
(
"Rcpp-introduction"
)
vignette
(
"Rcpp-introduction"
)
vignette("Rcpp-introduction")
require(spatstat)
fdata <- "~/Dropbox/Articles/ETAS/iranETAS/IranETAScode/mmsiran.csv"
X <- read.csv(file=fdata, header=TRUE)
X$Mw
summary(X$Mw)
summary(X$Lon)
summary(X$Lat)
read.csv(file="~/Downloads/query.csv")
U=read.csv(file="~/Downloads/query.csv")
names(U)
table(U$magType)
U[U$magType == "mb",]
V = U[U$magType == "mb",]
names(V)
dim(V)
plot(V$longitude, V$latitude)
V$time
substr(U$time)
substr(U$time, 4)
?substr
substr(U$time, 1, 4)
substr(U$time, 1, 8)
substr(U$time, 1, 10)
substr(U$time, 1, 11)
substr(U$time, 1, 10)
dd = substr(U$time, 1, 10)
substr(U$time, 11, 12)
substr(U$time, 12, 16)
substr(U$time, 12, 19)
substr(U$time, 12, 20)
substr(U$time, 12, 24)
substr(U$time, 12, 23)
substr(U$time, 22, 23)
substr(U$time, 23, 23)
table(substr(U$time, 23, 23))
table(substr(U$time, 22, 23))
substr(U$time, 12, 23)
substr(U$time, 12, 22)
tt <- substr(U$time, 12, 22)
iran.quakes
iran.quakes <- data.frame(date=dd, time=tt)
names(V)
iran.quakes <- data.frame(date=dd, time=tt, long=V$longitude, lat=V$latitude, mag=V$mag, depth=V$depth)
dd = substr(V$time, 1, 10)
tt <- substr(V$time, 12, 22)
iran.quakes <- data.frame(date=dd, time=tt, long=V$longitude, lat=V$latitude, mag=V$mag, depth=V$depth)
iran.quakes
V$type
table(V$type)
V$type == "nuclear explosion"
V$type != "nuclear explosion"
iran.quakes[V$type != "nuclear explosion", ]
iran.quakes <- iran.quakes[V$type != "nuclear explosion", ]
dim(iran.quakes)
plot(iran.quakes$long, iran.quakes$lat)
V[V$type == "nuclear explosion", ]
V[V$type == "nuclear explosion", 3:2]
points(V[V$type == "nuclear explosion", 3:2], col=2)
iran.quakes$long > 65
sum(iran.quakes$long > 65)
iran.quakes[iran.quakes$long <= 65, ]
iran.quakes <- iran.quakes[iran.quakes$long <= 65, ]
dim(iran.quakes)
plot(iran.quakes$long, iran.quakes$lat)
hist(iran.quakes$mag)
save(iran.quakes, file="~/Documents/iran.quakes.rda")
calss(iran.quakes)
class(iran.quakes)
?USAccDeaths
?state
?state.xx
?state.x77
AirPassengers
data()
ChickWeight
?ChickWeight
iran.quakes
names(iran.quakes)
iran.quakes$depth
summary(iran.quakes$depth)
dim(iran.quakes)
iran.quakes[, -6]
names(iran.quakes[, -6])
iran.quakes <- iran.quakes[, -6]
save(iran.quakes, file="~/Documents/iran.quakes.rda")
iran.quakes$date
iran.quakes$date[1:10]
summary(iran.quakes$long)
Three
Theoph
?Theoph
Orange
?Orange
dim(iran.quakes)
summarise.trend(iran.quakes$long)
summary(iran.quakes$long)
summarise.trend
?summarise.trend
summary(iran.quakes$long)
summary(iran.quakes$lat)
?bei
iran.quakes$date
iran.quakes$date
(iran.quakes$date)
cbind(iran.quakes$date)
paste(iran.quakes$date, iran.quakes$time)
dt <- paste(iran.quakes$date, iran.quakes$time)
start <- "1973/01/01 00:00:00"
date2day(dt, start, tz="GMT")
as.POSIXlt(dt)
dt <- paste(iran.quakes$date, iran.quakes$time)
ppx
ppx
ppx(data=iran.quakes)
?ppx
names(iran.quakes)
c("a") %in% names(iran.quakes)
c("a", "b") %in% names(iran.quakes)
c("date", "time", "long", "lat", "mag") %in% names(iran.quakes)
any(c("date", "time", "long", "lat", "mag") %in% names(iran.quakes))
all(c("date", "time", "long", "lat", "mag") %in% names(iran.quakes))
!all(c("date", "time", "long", "lat", "mag") %in% names(iran.quakes))
tolower()
tolower
tolower()
?is.data.frame
pcf
pcf.ppp
verifyclass()
verifyclass
a
as.data.frame
as.data.frame(dd)
names(as.data.frame(dd))
names(as.data.frame(iran.quakes))
names(as.data.frame(list(rnorm(10), 1:4)))
tolower()
tolower
?tolower
stop(paste("argument", sQuote(data), " must be a data frame with
column names ", vnames))
vnames <- c("date", "time", "long", "lat", "mag")
vanes
vnames
data
sQuote(data)
paste(" must be a data frame with
column names ", vnames)
sQuote(vnames)
?sQuote
dQuote(vnames)
paste(" must be a data frame with column names ", sQuote(vnames)))
paste(" must be a data frame with column names ", sQuote(vnames))
paste()
paste
paste(" must be a data frame with column names ", sQuote(vnames), collapse = T)
paste(" must be a data frame with column names ", sQuote(vnames), collapse = 2)
patse
?paste
paste(" must be a data frame with column names ", sQuote(vnames))
paste0(" must be a data frame with column names ", sQuote(vnames))
str()
str(sQuote(vnames))
paste0(" must be a data frame with column names ", str(vnames))
paste0(" must be a data frame with column names ", sQuote(str(vnames)))
?str
?paste
paste0(" must be a data frame with column names ", sQuote(vnames))
paste0(" must be a data frame with column names ", sQuote(vnames), collapse = ",")
as.character(vnames)
paste0(" must be a data frame with column names ", as.character(sQuote(vnames)))
paste0(" must be a data frame with column names ", toString(sQuote(vnames)))
paste0(" must be a data frame with column    names ", toString(sQuote(vnames)))
paste0(" must be a data frame with column names ", toString(sQuote(vnames)))
paste(" must be a data frame with column names ", toString(sQuote(vnames)))
ppx
?ppx
order()
match()
match
match(dnames)
match(dnames, vnames)
match(c("aa", "tnames"), vnames)
match(c("aa", "time"), vnames)
match(vnames, dnames)
dnames <- names(iran.quakes)
dnames = c(dnames, "aa", "bb")
match(vnames, dnames)
dnames = c("vv", dnames, "aa", "bb")
match(vnames, dnames)
?match
?ppx
as.ppp(
d
)
as.ppp
?as.ppm
as.POSIXlt(paste(iran.quakes$date, iran.quakes$time))
sort(as.POSIXlt(paste(iran.quakes$date, iran.quakes$time)))
rank(as.POSIXlt(paste(iran.quakes$date, iran.quakes$time)))
order(as.POSIXlt(paste(iran.quakes$date, iran.quakes$time)))
?order
dt = (as.POSIXlt(paste(iran.quakes$date, iran.quakes$time)))
is.unsorted(dt)
?is.unsorted(dt)
duplicated(dt)
duplicated
duplicated(dt)
which(duplicated(dt))
which(duplicated(dt)) == NULL
toString(which(duplicated(dt)))
toString(which(dt > 5)
)
toString(which(dt > 50000)
)
toString(which(dt > 50000000)
)
is.unsorted(dt)
warning("aaa")
ppp()
ppp
c(1, 2, 1, 5, 7, 6, 4, 3)
rank(c(1, 2, 1, 5, 7, 6, 4, 3))
order(c(1, 2, 1, 5, 7, 6, 4, 3))
?order
x = rnorm(1000)
x[order(x)]
range(iran.quakes$lat)
?ppx
iran.quakes[, -c("long", "mag")]
iran.quakes[, c("long", "mag")]
iran.quakes[, !c("long", "mag")]
iran.quakes[, -c("long", "mag")]
owin.poly
owin.poly
owin
?owin
dt
min(dt)
paste("aa", "bb\nv")
dt
attributes(dt)
format(dt)
attributes(dt)
?as.POSIXct
strptime(iran.quakes$date)
strftime(iran.quakes$date)
date()
datetime2day <- function(dates, times, origin=NULL, tz="", ...)
{
dt <- as.POSIXlt(paste(data$date, data$time), tz=tz, ...)
if (duplicated(dt))
stop(paste("no more than one event can occur simultaneously!",
"check events", toString(which(duplicated(dt)))))
if (is.null(origin))
origin <- min(dt)
else
{
origin <- as.POSIXlt(origin, tz=tz, ...)
if (any(dt < origin))
stop(paste("events must occur after the time origin", sQuote(origin)))
}
out <- as.numeric(difftime(dt, origin, units="days"))
return(out)
}
datetime2day(iran.quakes$date, iran.quakes$time, "1998-0-0")
datetime2day(iran.quakes$date, iran.quakes$time, "1998-1-1")
datetime2day <- function(dates, times, origin=NULL, tz="", ...)
{
dt <- as.POSIXlt(paste(dates, times), tz=tz, ...)
if (duplicated(dt))
stop(paste("no more than one event can occur simultaneously!",
"check events", toString(which(duplicated(dt)))))
if (is.null(origin))
origin <- min(dt)
else
{
origin <- as.POSIXlt(origin, tz=tz, ...)
if (any(dt < origin))
stop(paste("events must occur after the time origin", sQuote(origin)))
}
out <- as.numeric(difftime(dt, origin, units="days"))
return(out)
}
datetime2day(iran.quakes$date, iran.quakes$time, "1998-1-1")
datetime2day <- function(dates, times, origin=NULL, tz="", ...)
{
dt <- as.POSIXlt(paste(dates, times), tz=tz, ...)
if (any(duplicated(dt)))
stop(paste("no more than one event can occur simultaneously!",
"check events", toString(which(duplicated(dt)))))
if (is.null(origin))
origin <- min(dt)
else
{
origin <- as.POSIXlt(origin, tz=tz, ...)
if (any(dt < origin))
stop(paste("events must occur after the time origin", sQuote(origin)))
}
out <- as.numeric(difftime(dt, origin, units="days"))
return(out)
}
datetime2day(iran.quakes$date, iran.quakes$time, "1998-1-1")
datetime2day(iran.quakes$date, iran.quakes$time, "1968-1-1")
datetime2day <- function(dates, times, origin=NULL, tz="", ...)
{
dt <- as.POSIXlt(paste(dates, times), tz=tz, ...)
if (any(duplicated(dt)))
stop(paste("no more than one event can occur simultaneously!",
"check events", toString(which(duplicated(dt)))))
if (is.null(origin))
origin <- min(dt)
else
{
origin <- as.POSIXlt(origin, tz=tz, ...)
if (any(dt < origin))
stop(paste("events must occur after the time origin.",
"first eventoccured at", min(dt),
"but the time origin is", sQuote(origin)))
}
out <- as.numeric(difftime(dt, origin, units="days"))
return(out)
}
datetime2day(iran.quakes$date, iran.quakes$time, "1968-1-1")
datetime2day(iran.quakes$date, iran.quakes$time, "1998-1-1")
datetime2day <- function(dates, times, origin=NULL, tz="", ...)
{
dt <- as.POSIXlt(paste(dates, times), tz=tz, ...)
if (any(duplicated(dt)))
stop(paste("no more than one event can occur simultaneously!",
"check events", toString(which(duplicated(dt)))))
if (is.null(origin))
origin <- min(dt)
else
{
origin <- as.POSIXlt(origin, tz=tz, ...)
if (any(dt < origin))
stop(paste("events must occur after the time origin:",
"the first event occurred at", min(dt),
"but the time origin is set to be", sQuote(origin)))
}
out <- as.numeric(difftime(dt, origin, units="days"))
return(out)
}
datetime2day(iran.quakes$date, iran.quakes$time, "1998-1-1")
dt
?format
datetime2day(iran.quakes$date, iran.quakes$time, "1998-1-1")
datetime2day(iran.quakes$date, iran.quakes$time, "1998/1/1")
date2day <- function(dates, start, tz="", ...)
{
start <- as.POSIXlt(start, tz=tz, ...)
dates <- as.POSIXlt(dates, tz=tz, ...)
out <- as.numeric(difftime(dates, start, units="days"))
return(out)
}
date2day(paste(iran.quakes$date, iran.quakes$time), "1998/1/1")
summary(date2day(paste(iran.quakes$date, iran.quakes$time), "1998/1/1"))
as.POSIXlt
as.POSIXlt(23)
?as.POSIXlt
as.POSIXlt(23, origin="1924/01/01")
as.POSIXlt(23, origin="1924/01/01", tz="")
as.POSIXlt(23, origin="1924/01/01", tz="", units="days")
?difftime
?difftime
as.POSIXlt("1924/01/01", tz="", units="days")
as.POSIXlt("1924/01/01", tz="")
as.POSIXlt("1924/01/01", tz="") + 5
as.POSIXlt("1924/01/01", tz="") + 5days
as.POSIXlt("1924/01/01", tz="") + 5*60*60
as.POSIXlt("1924/01/01", tz="") + 5*60*60*12
as.POSIXlt("1924/01/01", tz="") + 5*60*60*24
as.POSIXlt("1924/01/01", tz="") + 5*60*60*24
as.POSIXlt("1924/01/01 00:00:10", tz="") + 5*60*60*24
as.POSIXlt("1924/01/01 02:00:10", tz="") + 5*60*60*24
owin
is.vector()
is.vector
?is.vector
owin
